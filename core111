###############################################################################
## 日志级别有： critical、 error、 warning、 notice、 info、 debug 级别由大到小， ##  级别越小输出越详细
###############################################################################



logging:
## 全局的默认日志级别
        level: info 
## 各个模块日志级别， 覆盖全局配置
        cauthdsl: warning 
        gossip: warning
        grpc: error
        ledger: info
        msp: warning
        policies: warning
        peer:
           gossip: warning


# 日志的输出格式

        format: '%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}'






###############################################################################
#
# Peer section peer部分
#
###############################################################################

peer:

id: peer0.org1.abccompany.com ## Peer节点ID

networkId: abccompanyNetWork ## 网络ID

listenAddress: 0.0.0.0:7051 ## 节点监听的本地网络接口地址

chaincodeAddress: 0.0.0.0:7052 ## 链码容器连接时的监听地址 如未指定, 则使用listenAddress的IP地址和7052端口

address: 0.0.0.0:7051 ## 节点对外的服务地址 （对外的地址）【还有人说是 与同组织内其他peer通信的地址; 配置在cli节点上表示peer与其通信的地址 ？】

addressAutoDetect: false ## 是否自动探测服务地址 (默认 关闭， 如果启用TLS时，最好关闭)

gomaxprocs: -1 ## Go的进程限制数 runtime.GOMAXPROCS(n) 默认 -1

keepalive: ## 客户端和peer间的网络心跳连接配置
　　　　　minInterval: 60s ## 最小的心跳间隔时间
　　　　　client: ## 该节点和客户端 的交互配置
　　　　　　　　　　　　　interval: 60s ## 和客户端 的心跳间隔 必须 interval >= minInterval
　　　　　　　　　　　　　timeout: 20s ## 和客户端 间的网络连接超时时间
　　　　　deliveryClient: ## 交付客户端用于与订购节点通信的心跳
　　　　　　　　　　　　　interval: 60s
　　　　　　　　　　　　　timeout: 20s





gossip: ## 节点间通信的gossip 协议的P2P通信 【主要包含了 启动 及 连接】
　　　　　bootstrap: 127.0.0.1:7051 ## 启动节点后 向哪些节点发起gossip连接，以加入网络，且节点相互间都是同一个组织的（peer0.org1.abccompany.com:7051）
　　　　　useLeaderElection: true ## 是否启动动态选举 组织的Leader 节点 与 orgLeader 互斥
　　　　　orgLeader: false ## 是否指定本节点为 组织Leader 节点 与 useLeaderElection 互斥
　　　　　endpoint: ## 本节点在组织内的gossip id
　　　　　maxBlockCountToStore: 100 ## 保存到内存的区块个数上限
　　　　　maxPropagationBurstLatency: 10ms ## 保存消息的最大时间，超过则触发转发给其他节点
　　　　　maxPropagationBurstSize: 10 ## 保存的最大消息个数，超过则触发转发给其他节点
　　　　　propagateIterations: 1 ## 消息转发的次数
　　　　　propagatePeerNum: 3 ## 推送消息给指定个数的节点
　　　　　pullInterval: 4s ## 拉取消息的时间间隔 (unit: second) 必须大于 digestWaitTime + responseWaitTime
　　　　　pullPeerNum: 3 ## 从指定个数的节点拉取消息
     requestStateInfoInterval: 4s ## 从节点拉取状态信息(StateInfo) 消息间隔 (unit: second)
     publishStateInfoInterval: 4s ## 向其他节点推动状态信息消息的间隔 (unit: second)
     stateInfoRetentionInterval: ## 状态信息消息的超时时间 (unit: second)
     publishCertPeriod: 10s ## 启动后在心跳消息中包括证书的等待时间
     skipBlockVerification: false ## 是否不对区块消息进行校验，默认为false
     dialTimeout: 3s ## gRPC 连接拨号的超时 (unit: second)
     connTimeout: 2s ## 建立连接的超时 (unit: second)
     recvBuffSize: 20 ## 收取消息的缓冲大小
     sendBuffSize: 200 ## 发送消息的缓冲大小
     digestWaitTime: 1s ## 处理摘要数据的等待时间 (unit: second) 可以大于 requestWaitTime
     requestWaitTime: 1500ms ## 处理nonce 数据的等待时间 (unit: milliseconds) 可以大于 digestWaitTime
     responseWaitTime: 2s ## 终止拉取数据处理的等待时间 (unit: second)
     aliveTimeInterval: 5s ## 定期发送Alive 心跳消息的时间间隔 (unit: second)
     aliveExpirationTimeout: 25s ## Alive 心跳消息的超时时间 (unit: second)
     reconnectInterval: 25s ## 断线后重连的时间间隔 (unit: second)
     externalEndpoint: ## 节点被组织外节点感知时的地址，公布给其他组织的地址和端口, 如果不指定, 其他组织将无法知道本peer的存在

     election: ## Leader 节点的选举配置
          startupGracePeriod: 15s ## leader节点选举等待的时间 (unit: second)
          membershipSampleInterval: 1s ## 测试peer稳定性的时间间隔 (unit: second)
          leaderAliveThreshold: 10s ## pear 尝试进行选举的等待超时 (unit: second)
          leaderElectionDuration: 5s ## pear 宣布自己为Leader节点的等待时间 (unit: second)

     pvtData: ## 这个我还真不知道干嘛的？谁知道告诉我
          pullRetryThreshold: 60s
          transientstoreMaxBlockRetention:
          pushAckTimeout: 3s
          btlPullMargin: 10

          reconcileBatchSize: 10　　　##1.3  abccompany
          reconcileSleepInterval: 5m  ##1.3  abccompany
    


##########################################################################
### abccompany   1.1 1.2 有这部分　1.3没有
##########################################################################
events: ## 事件配置
     address: 0.0.0.0:7053 ## 本地服务监听地址 (默认在所有网络接口上进心监听，端口 7053)
     buffersize: 100 ## 最大缓冲消息数，超过则向缓冲中发送事件消息会被阻塞
     timeout: 10ms ## 事件发送超时时间, 如果事件缓存已满, timeout < 0, 事件被丢弃; timeout > 0, 阻塞直到超时丢弃, timeout = 0, 阻塞直到发送出去
     timewindow: 15m ## 允许peer和 客户端 时间不一致的最大时间差
     keepalive: ## 客户端到peer间的事件心跳
         minInterval: 60s
         sendTimeout: 60s ## 在GRPC流上向客户端发送事件的超时时间




tls: ## tls配置
     enabled: false ## 是否开启 TLS，默认不开启TLS
     clientAuthRequired: false ## 客户端连接到peer是否需要使用加密
     cert: ## 证书密钥的位置, 各peer应该填写各自相应的路径
        file: tls/server.crt ## abccompany 本服务的身份验证证书，公开可见，访问者通过该证书进行验证
     key:
        file: tls/server.key ## abccompany 本服务的签名私钥 
     rootcert:
        file: tls/ca.crt ## abccompany 信任的根CA整数位置
     clientRootCAs: ## 用于验证客户端证书的根证书颁发机构的集合
        files:
           - tls/ca.crt
      clientKey: ## 当TLS密钥用于制作客户端连接。如果不设置，将使用而不是     peer.tls.key.file
             file:
      clientCert: ## 在进行客户端连接时用于TLS的X.509证书。 如果未设置，将使用peer.tls.cert.file
             file:






authentication: ## 身份验证包含与验证客户端消息相关的配置参数
      timewindow: 15m ## 客户端请求消息中指定的当前服务器时间与客户端时间之间的可接受差异





fileSystemPath: /var/hyperledger/production ## peer数据存储位置(包括账本,状态数据库等)



BCCSP: ## 加密库配置 与Orderer 配置一样
    Default: SW ## 使用软件加密方式 (默认 SW)
    SW:
      Hash: SHA2 ## Hash 算法类型，目前仅支持SHA2
      Security: 256
      FileKeyStore: ## 本地私钥文件路径，默认指向 <mapConfigPath>/keystore
      KeyStore:

      # Settings for the PKCS#11 crypto provider (i.e. when DEFAULT: PKCS11)
      PKCS11: ## 设置 PKCS#11 加密算法 (默认PKCS11)
           Library: ## 本地PKCS11依赖库
           Label: ## token的标识
           Pin: ## 使用Pin
           Hash:
           Security:
           FileKeyStore:
                 KeyStore:


mspConfigPath: msp ## abccompany msp 的本地路径


localMspId: Org1MSP ## abccompany  Peer 所关联的MSP 的ID


client: ## cli 公共客户端配置选项

connTimeout: 3s ## 连接超时时间



deliveryclient: ## 交付服务配置

reconnectTotalTimeThreshold: 3600s ## 交付服务交付失败后尝试重连的时间

connTimeout: 3s ## 交付服务和 orderer节点的连接超时时间

reConnectBackoffThreshold: 3600s ## 设置连续重试之间的最大延迟


localMspType: bccsp ## 本地MSP类型 （默认为 BCCSP）


profile: ## 是否启用Go自带的profiling 支持进行调试

enabled: false

listenAddress: 0.0.0.0:6060


adminService: ## admin服务用于管理操作，例如控制日志模块严重性等。只有对等管理员才能使用该服务


handlers:

authFilters:

-

name: DefaultAuth

-

name: ExpirationCheck ## 此筛选器检查身份x509证书过期

decorators:

-

name: DefaultDecorator

endorsers:

escc:

name: DefaultEndorsement

library:

validators:

vscc:

name: DefaultValidation

library:

validatorPoolSize: ## 处理交易验证的并发数, 默认是CPU的核数


discovery: ## 客户端使用发现服务来查询有关peers的信息，例如 - 哪些peer已加入某个channel，最新的channel配置是什么，最重要的是 - 给定chaincode和channel，哪些可能的peer满足认可 policy

enabled: true

authCacheEnabled: true

authCacheMaxSize: 1000

authCachePurgeRetentionRatio: 0.75

orgMembersAllowedAccess: false

###############################################################################

#

# VM section 链码运行环境配置 目前主要支持 Docker容器

#

###############################################################################

vm:


endpoint: unix:///var/run/docker.sock ## Docker Daemon 地址，默认是本地 套接字


docker:

tls: ## Docker Daemon 启用TLS时的相关证书配置, 包括信任的根CA证书、服务身份证书、签名私钥等等

enabled: false

ca:

file: docker/ca.crt

cert:

file: docker/tls.crt

key:

file: docker/tls.key


attachStdout: false ## 是否启用绑定到标准输出，启用后 链码容器 的输出消息会绑定到标准输出，方便进行调试


hostConfig: ## Docker 相关的主机配置，包括网络配置、日志、内存等等，这些配置在启动链码容器时进行使用

NetworkMode: host

Dns:

# - 192.168.0.1

LogConfig:

Type: json-file

Config:

max-size: "50m"

max-file: "5"

Memory: 2147483648


###############################################################################

#

# Chaincode section 链码相关配置

#

###############################################################################

chaincode:


id: ## 记录链码相关信息，包括路径、名称、版本等等，该信息会以标签形式写到链码容器

path:

name:


builder: $(DOCKER_NS)/fabric-ccenv:latest ## 通用的本地编译环境，是一个Docker 镜像

pull: false ##

golang: ## Go语言的链码部署生成镜像的基础Docker镜像

runtime: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASE_VERSION)

dynamicLink: false

car: ## car格式的链码部署生成镜像的基础Docker 镜像

runtime: $(BASE_DOCKER_NS)/fabric-baseos:$(ARCH)-$(BASE_VERSION)

java: ## java语言的基础镜像

Dockerfile: |

from $(DOCKER_NS)/fabric-javaenv:$(ARCH)-1.1.0

node: ## node.js的基础镜像

runtime: $(BASE_DOCKER_NS)/fabric-baseimage:$(ARCH)-$(BASE_VERSION)


startuptimeout: 300s ## 启动链码容器超时，等待超时时间后还没收到链码段的注册消息，则认为启动失败


executetimeout: 30s ## invoke 和 initialize 命令执行超时时间


deploytimeout: ## 部署链码的命令执行超时时间

mode: net ## 执行链码的模式，dev: 允许本地直接运行链码，方便调试； net: 意味着在容器中运行链码

keepalive: 0 ## Peer 和链码之间的心跳超市时间， <= 0 意味着关闭

system: ## 系统链码的相关配置 (系统链码白名单 ??)

cscc: enable

lscc: enable

escc: enable

vscc: enable

qscc: enable

systemPlugins: ## 系统链码插件

logging: ## 链码容器日志相关配置

level: info

shim: warning

format: '%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}'


###############################################################################

#

# Ledger section - ledger configuration encompases both the blockchain

# and the state 账本相关配置

#

###############################################################################

ledger:

blockchain: ## 设置系统区块链的整体配置，【后面会被丢弃】

state: ## 状态DB的相关配置(包括 golevelDB、couchDB)、DN连接、查询最大返回记录数等

stateDatabase: goleveldb ## stateDB的底层DB配置 (默认golevelDB)

couchDBConfig: ## 如果启用couchdb，配置连接信息 (goleveldb 不需要配置这些)

couchDBAddress: 127.0.0.1:5984

username:

o prevent unintended users from discovering the password.

password:

maxRetries: 3 ## 运行时出错重试数

maxRetriesOnStartup: 10 ## 启动时出错的重试数

requestTimeout: 35s ## 请求超时时间

queryLimit: 10000 ## 每个查询最大返回数

maxBatchUpdateSize: 1000 ## 批量更新最大记录数

warmIndexesAfterNBlocks: 1

history:

enableHistoryDatabase: true ## 是否启用历史数据库，默认开启


###############################################################################

#

# Metrics section 服务度量监控配置

#

#

###############################################################################

metrics:

enabled: false ## 是否开启监控服务

reporter: statsd

interval: 1s

statsdReporter:

address: 0.0.0.0:8125

flushInterval: 2s

flushBytes: 1432

promReporter: ## prometheus 普罗米修斯服务监听地址

listenAddress: 0.0.0.0:8080
