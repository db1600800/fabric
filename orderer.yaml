################################################################################
#
# Orderer Configuration orderer的配置
#
# - This controls the type and configuration of the orderer.
#
################################################################################

General:
       LedgerType: file ## 账本类型，支持ram、json、file 三种类型【建议用file】，其中ram保存在内存中；json、file保存在本地文件中 (通常为 /var/hyperledger/production/orderer 下)

       ListenAddress: 127.0.0.1 ## 服务监听地址，一般需要制定为服务的特定网络接口地址 或者全网(0.0.0.0)

       ListenPort: 7050 ## 服务监听端口 默认7050
       TLS: ## 启用TLS 时的相关配置 (grpc 传输)
           Enabled: false
           PrivateKey: tls/server.key ## Orderer 签名私钥
           Certificate: tls/server.crt ## Orderer 身份证书
           RootCAs:
              - tls/ca.crt ## 根证书
           ClientAuthRequired: false ## 是否对客户端也进行认证
           ClientRootCAs:


       Keepalive: ## 设置GRPC 服务心跳检查
           ServerMinInterval: 60s ## 客户端和 orderer 的 最小心跳间隔
           ServerInterval: 7200s ## 客户端和 orderer 的心跳间隔时间
           ServerTimeout: 20s ## 客户端和 Orderer 的超时时间
       
       LogLevel: info ## 日志等级

         ## 日志输出格式
       LogFormat: '%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}'


       GenesisMethod: provisional ## 创世块的提供方式 (系统通道初始区块的提供方式，支持 provisional 或者 file；前者根据GenesisProfile 指定默认的 $FABRIC_CFG_PATH/config.yaml 文件中的profile生成；后者使用GenesisFile 指定现成的初始区块文件)


       GenesisProfile: SampleInsecureSolo ## 创世块使用的Profile；GenesisMethod: provisional 才有效


       GenesisFile: genesisblock ## 使用现成创世块文件时，文件的路径 [创世块的位置] GenesisMethod: file 才有效


       LocalMSPDir: msp ## 本地MSP文件的路径 【orderer节点所需的安全认证文件的位置】

       LocalMSPID: OrderMSP ## Orderer所关联的MSP的ID MSP管理器用于注册安全认证文件的ID, 此ID必须与配置系统通道和创世区块时(configtx.yaml的OrdererGenesis部分)指定的组织中的某一个组织的ID一致


       Profile: ## 为Go pprof性能优化工具启用一个HTTP服务以便作性能分析(https://golang.org/pkg/net/http/pprof)
           Enabled: false ## 不启用
           Address: 0.0.0.0:6060 ## Go pprof的HTTP服务监听的地址和端口


       BCCSP: ## 加密库配置 具体参照Peer 配置
         Default: SW
         SW:
          Hash: SHA2
          Security: 256
          FileKeyStore:
          KeyStore:

       Authentication:
              TimeWindow: 15m


################################################################################
#
# SECTION: File Ledger 基于文件账本 配置 (file和json两种类型)
#
# - This section applies to the configuration of the file or json ledgers.
#
################################################################################

FileLedger:
     Location: /var/hyperledger/production/orderer ## 指定存放文件的位置，一般为 /var/hyperledger/production/orderer, 该目录下的 chains目录存放各个chain的区块，index目录存放 索引文件 (如果这项不指定, 每次节点重启都将使用一个新的临时位置)

     Prefix: hyperledger-fabric-ordererledger ## 如果不指定Location，则在临时目录下创建账本时目录的名称


################################################################################
#
# SECTION: RAM Ledger 基于内存账本 配置
#
# - This section applies to the configuration of the RAM ledger.
#
################################################################################

RAMLedger:
    HistorySize: 1000 ## 内存账本所支持存储的区块的数量, 如果内存中存储的区块达到上限, 继续追加区块会导致最旧的区块被丢弃


################################################################################
#
# SECTION: Kafka kafka 集群配置
#
# - This section applies to the configuration of the Kafka-based orderer, and
# its interaction with the Kafka cluster.
#
################################################################################

Kafka:

# kafka是一种基于发布/订阅模式的分布式消息系统

# fabric网络中, orderer节点集群组成kafka集群, 客户端是kafka集群的Producer(消息生产者), peer是kafka集群的Consumer(消息消费者)

# kafka集群使用ZooKeeper(分布式应用协调服务)管理集群节点, 选举leader.

      Retry: ## 连接时的充实操作 kafka 会利用 sarama 客户端为chennel创建一个producer 负责向kafka 写数据，一个comsumer负责kafka读数据

          ShortInterval: 5s ## 操作失败后的快速重试间隔时间

          ShortTotal: 10m ## 快速重试阶段最对重试多久

          LongInterval: 5m ## 快速充实阶段仍然失败后进入 慢重试阶段，慢重试的时间间隔

          LongTotal: 12h ## 慢重试最多重试多久
          NetworkTimeouts: ## Sarama 网络超时时间

                 DialTimeout: 10s

                 ReadTimeout: 10s

                 WriteTimeout: 10s

          Metadata: ## kafka集群leader 选举中的metadata 请求参数

               RetryBackoff: 250ms ## leader选举过程中元数据请求失败的重试间隔

               RetryMax: 3 ## 最大重试次数

          Producer: ## 发送消息到kafka集群时的超时

               RetryBackoff: 100ms ## 向kafka集群发送消息失败后的重试间隔

               RetryMax: 3 ## 最大重试次数

          Consumer: ## 从kafka集群接收消息时的超时
               RetryBackoff: 2s ## 从kafka集群拉取消息失败后的重试间隔

      Verbose: false ## 是否开启kafka的客户端的调试日志 (orderer与kafka集群交互是否生成日)


      TLS: ## 与kafka集群的连接启用TLS时的相关配置
         Enabled: false ## 是否开启TLS，默认不开启
         PrivateKey: ## Orderer 身份签名私钥
              # File: ## 私钥文件路径  #File: path/to/PrivateKey
         Certificate: ## kafka的身份证书
              # File: ## 证书文件路径  #File: path/to/Certificate
         RootCAs: ## 验证kafka证书时的根证书
              # File: ## 根证书文件路径 #File: path/to/RootCAs

     Version: ## kafka的版本，默认为 0.9.0.1


################################################################################

#

# Debug Configuration orderer节点的调试参数

#

# - This controls the debugging options for the orderer

#

################################################################################

Debug:

BroadcastTraceDir: ## 该orderer节点的广播服务请求保存的位置

DeliverTraceDir: ## 该orderer节点的传递服务请求保存的位置


